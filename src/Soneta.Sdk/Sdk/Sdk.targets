<?xml version="1.0" encoding="utf-8"?>

<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup Condition="$(Configuration) == 'Debug' AND '$(IsTestProject)' != 'true' AND $(StartProgram) == '' AND Exists($(SonetaAddonStartProgram))">
    <StartAction>Program</StartAction>
    <StartProgram>$(SonetaAddonStartProgram)</StartProgram>
    <AggregatePath Condition="'$(AggregateOutput)' == 'true'">..\</AggregatePath>
    <OutputPath Condition="$(OutputPath) == ''">$(AggregatePath)bin\$(Configuration)</OutputPath>
    <StartArguments>/extpath=$(MSBuildProjectDirectory)\$(OutputPath)\$(SonetaTargetFramework)</StartArguments>
  </PropertyGroup>
  
  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" Condition=" '$(CommonTargetsPath)' == '' " />

  <Target Name="ResolveSonetaSchemaReferences" DependsOnTargets="ResolveAssemblyReferences">
    <ItemGroup>
      <SonetaSchemaReference Include="$([System.IO.Path]::GetDirectoryName( '%(Reference.HintPath)' ))\..\..\schema\*.business.xml"
        Condition="$( [System.String]::new( '%( Reference.HintPath )' ).Trim().Length ) &gt; 0" />
    </ItemGroup>
    <Message Text="SonetaSchemaReference: %(SonetaSchemaReference.Identity)" />
  </Target>

  <Target Name="ResolveSonetaGeneratorExe" DependsOnTargets="ResolveAssemblyReferences">
    <ItemGroup>
      <SonetaGeneratorExe Include="%(Reference.HintPath)"
        Condition="$( [System.String]::new( '%( Reference.HintPath )' ).Contains( 'Soneta.Generator.exe' ) )" />
    </ItemGroup>
    <Message Text="SonetaGeneratorExe: @(SonetaGeneratorExe)" />
  </Target>

  <Target Name="PrepareSonetaGeneratorAssets" DependsOnTargets="ResolveSonetaSchemaReferences;ResolveSonetaGeneratorExe">
    <Error Text="Soneta.Generator.exe is missing." Condition=" '@(SonetaGeneratorExe)' == '' " />
    <ItemGroup>
      <BusinessXmls Include="@(None)" Condition="$([System.String]::new('%(Filename)%(Extension)').EndsWith('business.xml', StringComparison.InvariantCultureIgnoreCase ))"/>
      <WorkingXmls Include="@(BusinessXmls)"/>
      <WorkingXmls Include="@(None)" Condition="$([System.String]::new('%(Filename)%(Extension)').EndsWith('config.xml', StringComparison.InvariantCultureIgnoreCase ))"/>
    </ItemGroup>
  </Target>

  <Target Name="ExecuteSonetaGenerator" BeforeTargets="CoreCompile" DependsOnTargets="PrepareSonetaGeneratorAssets" 
          Condition=" ( '$(RunSonetaGenerator)' == '' OR '$(RunSonetaGenerator)' != 'false' ) AND $( [System.IO.Directory]::GetFiles( '$(ProjectDir)' , '*.business.xml', SearchOption.AllDirectories ).Length ) &gt; 0 "
          Inputs="@(WorkingXmls)" Outputs="@(WorkingXmls->'%(RelativeDir)%(Filename).cs')">

    <PropertyGroup>
      <CurrentBusinessXml>%(WorkingXmls.Identity)</CurrentBusinessXml>
    </PropertyGroup>
    <ItemGroup>
      <SameAssemblyBusinessXmls Include="@(BusinessXmls)" Condition=" '%(BusinessXmls.Identity)' != '$(CurrentBusinessXml)' "/>
    </ItemGroup>

    <Exec Condition="'$(SavedFile)' != '' AND '%(WorkingXmls.FullPath)' == '$(SavedFile)'"
          Command="@(SonetaGeneratorExe) $(SavedFile) FILE" />
    <Exec Condition="'@(SonetaSchemaReference->Count())' &gt; 0 AND '@(WorkingXmls->Count())' &gt; 0"
          Command="@(SonetaGeneratorExe) -s @(SonetaSchemaReference,' ') @(SameAssemblyBusinessXmls,' ') %(WorkingXmls.FullPath)" />

    <ItemGroup>
      <GeneratedCs Include="@(WorkingXmls->'%(RelativeDir)%(Filename).cs')"/>
      <Compile Remove="@(GeneratedCs)" />
      <Compile Include="@(GeneratedCs)"/>
    </ItemGroup>
  </Target>

</Project>
